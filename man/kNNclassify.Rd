% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/classification.R
\name{kNNclassify}
\alias{kNNclassify}
\title{kNNclassify}
\usage{
kNNclassify(cpm, geneIdx, PCiter, k, pca = NULL, quietly = TRUE)
}
\arguments{
\item{cpm}{matrix; Counts per million.}

\item{geneIdx}{Integer; Indices of genes to include in PCA.}

\item{PCiter}{Integer; Length 1 vector indicating the number of iterations to
perform when determining the numer of retained principal components.}

\item{k}{Integer; Length 1 vector indicating the number of nearest neighbors
for each sample.}

\item{pca}{Matrix; Optional pre-computed PCA. If NULL, PCA will be computed within
the function.}

\item{quietly}{Logical; indicates if function should be verbose.}
}
\value{
Returns a tibble with two columns; the first indicating the sample
name and the second indicating the classification.
}
\description{
The function classifies samples in an unsupervised fashion by:
\enumerate{
  \item Running a principal component analysis.
  \item Uses Horn's technique to evaluate components to retain via
  \code{\link[paran]{paran}}.
  \item Finds k nearest neighbors in PCA space.
  \item Calculates the Euclidean distance between samples in PCA space.
  \item Constructs a weighted graph where each sample is connected to the k
  nearest neighbors with an edge weight = 1 - Euclidean distance.
  \item Uses the Louvain community detection algorithm to classify the
  samples.
}
}
\examples{

#setup input data
s <- stringr::str_detect(colnames(testCounts), "^s")
e <- stringr::str_detect(rownames(testCounts), "^ERCC\\\\-[0-9]*$")
c <- testCounts[!e, s]
cpm <- t(t(c) / colSums(c) * 10^6)

#pre-run PCA
pca <- gmodels::fast.prcomp(t(cpm), scale. = TRUE)$x

#run KNN graph classification
kc <- kNNclassify(cpm, 1:nrow(c), 20, 15, pca = pca)

#plot
pData <- merge(kc, matrix_to_tibble(pca[, 1:2], "sample"))
plot(pData$PC1, pData$PC2, col = rainbow(4)[pData$louvain], pch = 16)

}
\author{
Jason T. Serviss
}
